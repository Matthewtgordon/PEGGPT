#!/usr/bin/env python3
"""
{{ description | default('Validation script for scaffolded templates and generated code') }}
Generated by PEG scaffolder for {{ project_name | default('PEGGPT') }} project.
"""

import json
import sys
import ast
from pathlib import Path
from typing import List, Dict, Any

def validate_python_syntax(file_path: Path) -> bool:
    """Validate Python file syntax."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        ast.parse(content)
        print(f"[OK] Python syntax valid: {file_path}")
        return True
    except SyntaxError as e:
        print(f"[FAIL] Python syntax error in {file_path}: {e}")
        return False
    except Exception as e:
        print(f"[FAIL] Error reading {file_path}: {e}")
        return False

def validate_json_syntax(file_path: Path) -> bool:
    """Validate JSON file syntax."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            json.load(f)
        print(f"[OK] JSON syntax valid: {file_path}")
        return True
    except json.JSONDecodeError as e:
        print(f"[FAIL] JSON syntax error in {file_path}: {e}")
        return False
    except Exception as e:
        print(f"[FAIL] Error reading {file_path}: {e}")
        return False

def validate_workflow_structure(file_path: Path) -> bool:
    """Validate workflow JSON structure."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        required_fields = ['version', 'nodes', 'edges', 'entry_point']
        for field in required_fields:
            if field not in data:
                print(f"[FAIL] Missing required field '{field}' in {file_path}")
                return False
        
        # Validate nodes structure
        for node in data.get('nodes', []):
            if not all(k in node for k in ['id', 'type', 'agent']):
                print(f"[FAIL] Invalid node structure in {file_path}: {node}")
                return False
        
        # Validate edges structure
        for edge in data.get('edges', []):
            if not all(k in edge for k in ['from', 'to']):
                print(f"[FAIL] Invalid edge structure in {file_path}: {edge}")
                return False
        
        print(f"[OK] Workflow structure valid: {file_path}")
        return True
        
    except Exception as e:
        print(f"[FAIL] Error validating workflow {file_path}: {e}")
        return False

def validate_test_structure(file_path: Path) -> bool:
    """Validate test JSON structure."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        if 'tests' not in data:
            print(f"[FAIL] Missing 'tests' array in {file_path}")
            return False
        
        for test in data['tests']:
            required_fields = ['title', 'prompt', 'expected_behavior', 'type', 'id']
            for field in required_fields:
                if field not in test:
                    print(f"[FAIL] Missing field '{field}' in test: {test.get('title', 'unknown')}")
                    return False
        
        print(f"[OK] Test structure valid: {file_path}")
        return True
        
    except Exception as e:
        print(f"[FAIL] Error validating test file {file_path}: {e}")
        return False

def main():
    """Main validation function."""
    print("=== {{ project_name | default('PEG') }} Scaffold Validation ===")
    
    all_valid = True
    
    # Validate Python files in standard locations
    python_paths = [
        Path("plugins"),
        Path("agents"),
        Path("src")
    ]
    
    for path in python_paths:
        if path.exists():
            for py_file in path.glob("**/*.py"):
                if not validate_python_syntax(py_file):
                    all_valid = False
    
    # Validate workflow JSON files
    for workflow_file in Path(".").glob("*Workflow.json"):
        if not validate_json_syntax(workflow_file):
            all_valid = False
        elif not validate_workflow_structure(workflow_file):
            all_valid = False
    
    # Validate test JSON files  
    for test_file in Path(".").glob("*Tests.json"):
        if not validate_json_syntax(test_file):
            all_valid = False
        elif not validate_test_structure(test_file):
            all_valid = False
    
    # Validate core project files
    core_files = [
        "Knowledge.json",
        "Rules.json", 
        "SessionConfig.json",
        "WorkflowGraph.json",
        "PromptScoreModel.json"
    ]
    
    for core_file in core_files:
        file_path = Path(core_file)
        if file_path.exists():
            if not validate_json_syntax(file_path):
                all_valid = False
    
    print("\n=== Validation Summary ===")
    if all_valid:
        print("[OK] All validations passed")
        sys.exit(0)
    else:
        print("[FAIL] Some validations failed")
        sys.exit(1)

if __name__ == "__main__":
    main()