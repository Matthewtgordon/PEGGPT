#!/usr/bin/env python3
"""
{{ description | default('Gradio web UI for PEG REPL interface') }}
Generated by PEG scaffolder for {{ project_name | default('PEGGPT') }} project.
"""

import gradio as gr
import sys
import io
from contextlib import redirect_stdout, redirect_stderr
from pathlib import Path

# Import the CLI functions
sys.path.append(str(Path(__file__).parent))
from src.cli import classify_intent, run_phase, scaffold_plugin, scaffold_workflow, scaffold_agent, scaffold_test, scaffold_ci
from src.cli import run_workflow, show_workflow_status, stop_workflow, pause_workflow, resume_workflow
from src.cli import review_current_step, refine_current_step, mark_done, show_next

class PEGChatInterface:
    """Web interface wrapper for PEG REPL functionality."""
    
    def __init__(self):
        self.chat_history = []
        self.system_context = "{{ system_context | default('PEG Assistant: Advanced prompt engineering and workflow orchestration') }}"
    
    def process_command(self, message: str, history: list) -> tuple:
        """Process user command and return response with updated history."""
        
        # Add user message to history
        history.append([message, None])
        
        # Capture output from CLI functions
        output_buffer = io.StringIO()
        error_buffer = io.StringIO()
        
        try:
            with redirect_stdout(output_buffer), redirect_stderr(error_buffer):
                intent, params = classify_intent(message)
                
                if intent == "quit":
                    response = "[OK] Use the browser close button to exit"
                elif intent == "help":
                    response = self._get_help_text()
                elif intent == "run_phase":
                    run_phase(params["phase"])
                    response = output_buffer.getvalue() or "[OK] Phase tasks displayed"
                elif intent == "scaffold_plugin":
                    scaffold_plugin(params["plugin_name"])
                    response = output_buffer.getvalue() or f"[OK] Plugin {params['plugin_name']} scaffolded"
                elif intent == "scaffold_workflow":
                    scaffold_workflow(params["workflow_name"])
                    response = output_buffer.getvalue() or f"[OK] Workflow {params['workflow_name']} scaffolded"
                elif intent == "scaffold_agent":
                    scaffold_agent(params["agent_name"])
                    response = output_buffer.getvalue() or f"[OK] Agent {params['agent_name']} scaffolded"
                elif intent == "scaffold_test":
                    scaffold_test(params["test_suite_name"])
                    response = output_buffer.getvalue() or f"[OK] Test suite {params['test_suite_name']} scaffolded"
                elif intent == "scaffold_ci":
                    scaffold_ci(params["pipeline_name"])
                    response = output_buffer.getvalue() or f"[OK] CI pipeline {params['pipeline_name']} scaffolded"
                elif intent == "run_workflow":
                    run_workflow(params["workflow_name"])
                    response = output_buffer.getvalue() or f"[OK] Workflow {params['workflow_name']} executed"
                elif intent == "show_status":
                    show_workflow_status()
                    response = output_buffer.getvalue() or "[OK] Status displayed"
                elif intent == "stop_workflow":
                    stop_workflow()
                    response = output_buffer.getvalue() or "[OK] Workflow stopped"
                elif intent == "pause_workflow":
                    pause_workflow()
                    response = output_buffer.getvalue() or "[OK] Workflow paused"
                elif intent == "resume_workflow":
                    resume_workflow()
                    response = output_buffer.getvalue() or "[OK] Workflow resumed"
                elif intent == "review_step":
                    review_current_step()
                    response = output_buffer.getvalue() or "[OK] Step review displayed"
                elif intent == "refine_step":
                    refine_current_step(params["refinement"])
                    response = output_buffer.getvalue() or f"[OK] Refinement applied: {params['refinement']}"
                elif intent == "mark_done":
                    mark_done()
                    response = output_buffer.getvalue() or "[OK] Phase marked complete"
                elif intent == "show_next":
                    show_next()
                    response = output_buffer.getvalue() or "[OK] Next tasks displayed"
                else:
                    response = "[WARN] Unknown command. Type 'help' for available commands."
                
                # Include any error output
                error_output = error_buffer.getvalue()
                if error_output:
                    response += f"\n\nErrors:\n{error_output}"
                    
        except Exception as e:
            response = f"[FAIL] Error processing command: {str(e)}"
        
        # Add response to history
        history[-1][1] = response
        
        return "", history
    
    def _get_help_text(self) -> str:
        """Get formatted help text for the web interface."""
        return """**PEG Assistant Commands:**

**Phase Management:**
- `run-phase <n>` - List tasks for phase <n>
- `mark-done` / `done` - Mark current phase complete
- `show-next` / `next` - Show next pending tasks

**Scaffolding:**
- `scaffold plugin <Name>` - Generate plugin skeleton
- `scaffold workflow <Name>` - Generate workflow JSON
- `scaffold agent <Name>` - Generate agent skeleton
- `scaffold test <Name>` - Generate test suite JSON
- `scaffold ci [Name]` - Generate CI pipeline and validation

**Workflow Execution:**
- `run workflow <Name>` - Execute workflow with orchestrator
- `status` / `state` - Show workflow execution status
- `stop` / `halt` - Stop running workflow
- `pause` / `break` - Pause workflow for review
- `resume` / `continue` - Resume paused workflow

**Human-in-the-Loop:**
- `review` - Review current workflow step
- `refine <changes>` - Refine current step with changes

Type any command above to get started!"""

def create_interface():
    """Create and configure the Gradio interface."""
    peg_chat = PEGChatInterface()
    
    with gr.Blocks(
        title="{{ app_title | default('PEG Assistant') }}",
        theme=gr.themes.{{ theme | default('Soft') }}()
    ) as demo:
        gr.Markdown(f"""
        # {{{ app_title | default('PEG Assistant') }}}
        
        {peg_chat.system_context}
        
        This is a web interface for the PEG (Prompt Engineering Guide) system. 
        You can use all REPL commands through this chat interface.
        """)
        
        chatbot = gr.Chatbot(
            [],
            elem_id="chatbot",
            bubble_full_width=False,
            height={{ chat_height | default(500) }}
        )
        
        with gr.Row():
            msg = gr.Textbox(
                label="Command",
                placeholder="Type a PEG command (e.g., 'help', 'scaffold plugin MyPlugin', 'run workflow Test')",
                container=False,
                scale=7
            )
            submit_btn = gr.Button("Send", variant="primary", scale=1)
            clear_btn = gr.Button("Clear", variant="secondary", scale=1)
        
        # Handle message submission
        msg.submit(
            peg_chat.process_command,
            inputs=[msg, chatbot],
            outputs=[msg, chatbot]
        )
        
        submit_btn.click(
            peg_chat.process_command,
            inputs=[msg, chatbot],
            outputs=[msg, chatbot]
        )
        
        clear_btn.click(
            lambda: ([], ""),
            outputs=[chatbot, msg]
        )
        
        # Add examples
        gr.Examples(
            examples=[
                ["help"],
                ["scaffold plugin TestPlugin"],
                ["scaffold workflow ExampleFlow"],
                ["run-phase 1"],
                ["show-next"],
                ["run workflow Example"],
                ["status"],
                ["review"]
            ],
            inputs=msg
        )
    
    return demo

if __name__ == "__main__":
    # Create and launch the interface
    demo = create_interface()
    demo.launch(
        server_name="{{ server_host | default('127.0.0.1') }}",
        server_port={{ server_port | default(7860) }},
        share={{ share_public | default(False) | lower }},
        debug={{ debug_mode | default(False) | lower }}
    )