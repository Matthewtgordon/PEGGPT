#!/usr/bin/env python3
"""
{{ description | default('Streamlit web UI for PEG REPL interface') }}
Generated by PEG scaffolder for {{ project_name | default('PEGGPT') }} project.
"""

import streamlit as st
import sys
import io
from contextlib import redirect_stdout, redirect_stderr
from pathlib import Path
from datetime import datetime

# Import the CLI functions
sys.path.append(str(Path(__file__).parent))
from src.cli import classify_intent, run_phase, scaffold_plugin, scaffold_workflow, scaffold_agent, scaffold_test, scaffold_ci
from src.cli import run_workflow, show_workflow_status, stop_workflow, pause_workflow, resume_workflow
from src.cli import review_current_step, refine_current_step, mark_done, show_next

# Configure page
st.set_page_config(
    page_title="{{ app_title | default('PEG Assistant') }}",
    page_icon="🤖",
    layout="wide",
    initial_sidebar_state="expanded"
)

def init_session_state():
    """Initialize session state variables."""
    if "messages" not in st.session_state:
        st.session_state.messages = []
    if "command_history" not in st.session_state:
        st.session_state.command_history = []

def process_command(command: str) -> str:
    """Process PEG command and return response."""
    output_buffer = io.StringIO()
    error_buffer = io.StringIO()
    
    try:
        with redirect_stdout(output_buffer), redirect_stderr(error_buffer):
            intent, params = classify_intent(command)
            
            if intent == "quit":
                return "[OK] Use the browser to navigate away to exit"
            elif intent == "help":
                return get_help_text()
            elif intent == "run_phase":
                run_phase(params["phase"])
                return output_buffer.getvalue() or "[OK] Phase tasks displayed"
            elif intent == "scaffold_plugin":
                scaffold_plugin(params["plugin_name"])
                return output_buffer.getvalue() or f"[OK] Plugin {params['plugin_name']} scaffolded"
            elif intent == "scaffold_workflow":
                scaffold_workflow(params["workflow_name"])
                return output_buffer.getvalue() or f"[OK] Workflow {params['workflow_name']} scaffolded"
            elif intent == "scaffold_agent":
                scaffold_agent(params["agent_name"])
                return output_buffer.getvalue() or f"[OK] Agent {params['agent_name']} scaffolded"
            elif intent == "scaffold_test":
                scaffold_test(params["test_suite_name"])
                return output_buffer.getvalue() or f"[OK] Test suite {params['test_suite_name']} scaffolded"
            elif intent == "scaffold_ci":
                scaffold_ci(params["pipeline_name"])
                return output_buffer.getvalue() or f"[OK] CI pipeline {params['pipeline_name']} scaffolded"
            elif intent == "run_workflow":
                run_workflow(params["workflow_name"])
                return output_buffer.getvalue() or f"[OK] Workflow {params['workflow_name']} executed"
            elif intent == "show_status":
                show_workflow_status()
                return output_buffer.getvalue() or "[OK] Status displayed"
            elif intent == "stop_workflow":
                stop_workflow()
                return output_buffer.getvalue() or "[OK] Workflow stopped"
            elif intent == "pause_workflow":
                pause_workflow()
                return output_buffer.getvalue() or "[OK] Workflow paused"
            elif intent == "resume_workflow":
                resume_workflow()
                return output_buffer.getvalue() or "[OK] Workflow resumed"
            elif intent == "review_step":
                review_current_step()
                return output_buffer.getvalue() or "[OK] Step review displayed"
            elif intent == "refine_step":
                refine_current_step(params["refinement"])
                return output_buffer.getvalue() or f"[OK] Refinement applied: {params['refinement']}"
            elif intent == "mark_done":
                mark_done()
                return output_buffer.getvalue() or "[OK] Phase marked complete"
            elif intent == "show_next":
                show_next()
                return output_buffer.getvalue() or "[OK] Next tasks displayed"
            else:
                return "[WARN] Unknown command. Use the help sidebar for available commands."
            
    except Exception as e:
        return f"[FAIL] Error processing command: {str(e)}"

def get_help_text() -> str:
    """Get formatted help text."""
    return """**Available Commands:**

**Phase Management:**
- `run-phase <n>` - List tasks for phase <n>
- `mark-done` / `done` - Mark current phase complete
- `show-next` / `next` - Show next pending tasks

**Scaffolding:**
- `scaffold plugin <Name>` - Generate plugin skeleton
- `scaffold workflow <Name>` - Generate workflow JSON
- `scaffold agent <Name>` - Generate agent skeleton
- `scaffold test <Name>` - Generate test suite JSON
- `scaffold ci [Name]` - Generate CI pipeline and validation

**Workflow Execution:**
- `run workflow <Name>` - Execute workflow with orchestrator
- `status` / `state` - Show workflow execution status
- `stop` / `halt` - Stop running workflow
- `pause` / `break` - Pause workflow for review
- `resume` / `continue` - Resume paused workflow

**Human-in-the-Loop:**
- `review` - Review current workflow step
- `refine <changes>` - Refine current step with changes"""

def main():
    """Main Streamlit application."""
    init_session_state()
    
    # Title
    st.title("{{ app_title | default('🤖 PEG Assistant') }}")
    st.markdown("{{ system_context | default('Advanced prompt engineering and workflow orchestration interface') }}")
    
    # Sidebar with help and shortcuts
    with st.sidebar:
        st.header("📋 Quick Commands")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("📚 Help", use_container_width=True):
                response = get_help_text()
                st.session_state.messages.append({"role": "user", "content": "help"})
                st.session_state.messages.append({"role": "assistant", "content": response})
                st.rerun()
            
            if st.button("📋 Show Next", use_container_width=True):
                response = process_command("show-next")
                st.session_state.messages.append({"role": "user", "content": "show-next"})
                st.session_state.messages.append({"role": "assistant", "content": response})
                st.rerun()
            
            if st.button("✅ Mark Done", use_container_width=True):
                response = process_command("mark-done")
                st.session_state.messages.append({"role": "user", "content": "mark-done"})
                st.session_state.messages.append({"role": "assistant", "content": response})
                st.rerun()
        
        with col2:
            if st.button("📊 Status", use_container_width=True):
                response = process_command("status")
                st.session_state.messages.append({"role": "user", "content": "status"})
                st.session_state.messages.append({"role": "assistant", "content": response})
                st.rerun()
            
            if st.button("⏸️ Pause", use_container_width=True):
                response = process_command("pause")
                st.session_state.messages.append({"role": "user", "content": "pause"})
                st.session_state.messages.append({"role": "assistant", "content": response})
                st.rerun()
            
            if st.button("🔍 Review", use_container_width=True):
                response = process_command("review")
                st.session_state.messages.append({"role": "user", "content": "review"})
                st.session_state.messages.append({"role": "assistant", "content": response})
                st.rerun()
        
        st.markdown("---")
        st.header("🚀 Quick Scaffold")
        
        scaffold_type = st.selectbox("Type", ["plugin", "workflow", "agent", "test", "ci"])
        scaffold_name = st.text_input("Name", placeholder="MyComponent")
        
        if st.button("🔧 Generate", use_container_width=True):
            if scaffold_name:
                command = f"scaffold {scaffold_type} {scaffold_name}"
                response = process_command(command)
                st.session_state.messages.append({"role": "user", "content": command})
                st.session_state.messages.append({"role": "assistant", "content": response})
                st.rerun()
            else:
                st.error("Please enter a name")
        
        st.markdown("---")
        st.header("📈 Examples")
        
        examples = [
            "run-phase 1",
            "scaffold plugin TestPlugin",
            "scaffold workflow ExampleFlow",
            "run workflow Test",
            "review"
        ]
        
        for example in examples:
            if st.button(f"`{example}`", use_container_width=True):
                response = process_command(example)
                st.session_state.messages.append({"role": "user", "content": example})
                st.session_state.messages.append({"role": "assistant", "content": response})
                st.rerun()
    
    # Main chat interface
    st.markdown("### 💬 Chat Interface")
    
    # Display chat messages
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # Chat input
    if prompt := st.chat_input("Enter a PEG command..."):
        # Add user message
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Process command and add response
        with st.chat_message("assistant"):
            with st.spinner("Processing command..."):
                response = process_command(prompt)
            st.markdown(response)
        
        st.session_state.messages.append({"role": "assistant", "content": response})
        st.session_state.command_history.append(prompt)
    
    # Show command history in expander
    if st.session_state.command_history:
        with st.expander("📜 Command History"):
            for i, cmd in enumerate(reversed(st.session_state.command_history[-10:]), 1):
                st.text(f"{i}. {cmd}")

if __name__ == "__main__":
    main()